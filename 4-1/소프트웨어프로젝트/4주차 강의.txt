스크럼 애자일 프로세스 모델

소프트웨어 개발 방법론
: 소프트웨어 개발 생명주기에 정형화된 방법 및 절차, 도구 등을 체계적으로 정리하여 표준화한 문서

구조적 기법(어떻게 하면 복잡성 줄일 것인가?)(1970년대)(structured programming, structured design)
->정보공학 기법(기업 전체의 관점에서 데이터를 공유하면서 어떻게 효율적으로 개발?)(1980년대)
->객체지향 기법(프로그램 크기가 너무 커지니 모듈화가 핵심 키->응집도는 높고 결합도는 낮아야 함)(1990년대)
->CBD 기법(소프트웨어 부품을 표준화해버리면 편해짐->소프트웨어 재사용성 강조, but 인터페이스에 대한 표준이 없음-> 크게 성공 못함)(2000년대)
->Agile 기법(민첩함, 재빠름 -> 사용자의 요구사항에 재빠르게 반응->요구하는 시점에 원하는 결과를 만들어줌)(2010년대)

주먹구구식 모델 : 아무것도 없는 모델
폭포수 모델 : 선형 순차적 모델, 요구사항 분석 후 승인 받으면 설계단계 결제 떨어지면 코딩단계로 이런식으로 순차적으로 진행
                   프로젝트 규모가 중소형이고 뭘 해야할지 명확하게 정의되어 있을 때 적합
V 모델
진화적 프로세스 모델 : 그냥 한번 만들었다가 개선시켜서 다시 개발하는 유형 ex) 프로토타입 모델
나선형 모델
단계적 개발 모델
1. 점증적 개발
2. 반복적 개발

애자일 프로세스 모델
->고객의 요구에 민첩하게 대응 그때그때 문제를 풀어나가는 방법론
    반복적 개발, 잦은 출시를 목표
-가볍고 비교적 변화를 수용하기 쉬운 방법론 : 익스트림 프로그래밍, 스크럼, 크리스털과 같은 방법론
-개개인과 상호소통을 중시, 실행 가능한 소프트웨어를 중시, 고객과의 협력을 중시, 변화에 대한 민첩한 대응에 중시
-고객의 변화에 능동적으로 대처하는 것을 강조

애자일 개발 방법
-반복적 개발을 통한 잦은 출시를 목표
-실행 가능한 프로토타입을 만들어 사용자에게 확인받고 좀 더 빠른 시간 내 소프트웨어를 사용할 수 있도록 하는 것
-문서 편집기를 만드는 과정

애자일 개발 방법론
1. 스크럼(우리는 1주 정도로 잡자)
- 구성원들 간 협력이 중요 -> 효율적인 성과

스크럼 개발 프로세스
- 팀의 개선, 프로젝트 관리를 위한 애자일 방법론
- 개발 팀을 운영하는 효율적인 운영 방식

1) 제품 기능 목록 작성
- 제품 기능 목록은 우선순위가 매겨진 사용자가 요구하는 기능목록
- 제품 책임자가 요구 사항 목록에 우선순위를 매겨 제품 기능 목록을 작성
- 한 번 결정된 제품 기능 목록은 확정된 것이 아니라 개발 중이라도 수정 가능

2) 사용자 스토리 작성
- 메모지 한 장에 쓰인 사용자 요구 사항
- 구현할 기능이 사용자 언어로 작성

3) 스토리 포인트 산정
- 작성된 사용자 스토리는 스토리 보드에 나열
- 사용자 스토리는 우선순위가 정해져야 하고, 업무량을 파악해 수행하는데 걸리는 개발 기간도 산정
- 상대적인 개발 시간(스토리 포인트)이 중요

스프린트
- 전력 질주, 순발력이 좋고 출발 속도가 빠른 것(작업량 많지 않고 개발 기간도 짧음)
- 작은 단위의 개발 업무를 단기간 내에 전력 질주하여 개발 

소멸 차트 : 개발이 완료되기까지 남은 작업량을 보여줌
스프린트 계획 : 목표 세우는 일, 제품 기능 목록에서 어떤 항목을 스프린트에서 진행할지
일일 스크럼 회의 : 매일한다. 서서한다. 약속된 시간에 한다. 짧게 한다. 진행상황만 점검한다. 모든 팀원이 참석.
                         진행 상황을 얘기.
-> 스크럼 마스터의 역할 : 개발하는데 방해되는 요소를 찾아 문제 해결, 개개인이 수행하고 있는 일의 진행 상황을 확인, 소멸 차트에 남은 작업량 표시

배포 목록
- 사용자에게 시스템 일부를 제공하는 것

절차 : 제품 기능 목록 작성 -> 스프린트 계획 회의 -> 스프린트 수행 -> 개발 완료 -> 스프린트 완료 후

스크럼 단점 : management 작업 필요, 일일 스크럼 회의 15분 이내, 투입 공수 불측정에 따른 효율성 평가 불가, 프로세스 품질 평가 불가

2. 익스트림 프로그래밍
3. 린
4. 크리스털 패밀리
5. 기능 주도
6. 동적 시스템 개발 방법론
7. 애자일 UP